#!/bin/sh
# .___________. __    __   _______
# |           ||  |  |  | |   ____|
# `---|  |----`|  |__|  | |  |__
#     |  |     |   __   | |   __|
#     |  |     |  |  |  | |  |____
#     |__|     |__|  |__| |_______|
#
# .___________. _______ .______      .___  ___.
# |           ||   ____||   _  \     |   \/   |
# `---|  |----`|  |__   |  |_)  |    |  \  /  |
#     |  |     |   __|  |      /     |  |\/|  |
#     |  |     |  |____ |  |\  \----.|  |  |  |
#     |__|     |_______|| _| `._____||__|  |__|
#
# Copyright (C) 2019 naheel-azawy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# THETERM is used to automatically open terminal emulators in tmux
# sessions and connect to deattached sessions. It also tries to start
# in the directory of the current X window.
# Depends on: tmux, xprop, xdotool

# Name of this script
BINAME=$(basename "$0")

# Full path to this script
BINPATH=$(realpath "$0")

# Get last PID before any mess happen
# example:
# fish(13890)---bash(23328)---lf(6422)-+-lf(6428)-+-{lf}(6432)
#                                 ^    |          |-{lf}(6433)
#                                 |    |          |    ...
#                                 |    |-sh(6431)
#                 "Get this" --- /     |-{lf}(6423)
#                                      |   ...
getgoodpid() {
    PID="$1"
    [ "$TREE_DIF" = '' ] && TREE_DIF=0
    pstree -lpA "$PID" |
        # Ignore subprocesses of this script
        awk -F"---$BINAME" '{print $1}' |
        # First line
        head -n1 |
        # Left side in the left tree
        awk -F'---' '{print $NF}' |
        # Get rid of garbage on the right
        awk -F')' '{print $1}' |
        # The PID
        sed -En 's/.+\(([0-9]+).*/\1/p'
}

# Get the current working directory based on the focused X window
xpwd() {

    CWD=''

    # Get window ID
    ID=$(xdotool getactivewindow)

    # Get PID of process whose window this is
    PID=$(xprop -id "$ID" | grep -m 1 PID | cut -d " " -f 3)

    if [ -n "$PID" ]; then

        # is an emacs instance
        if ps -p "$PID" -o command | grep emacs -q; then

            CWD=$(emacsclient --no-wait --eval '(buffer-file-name (switch-to-buffer (other-buffer (current-buffer) 1))))' |
                      cut -d '"' -f2)
            CWD=$(dirname "$CWD")

        else

            PID=$(getgoodpid "$PID")
            # Get tmux PID if any
            # Get the tmux client connected session PID
            TMUXC=$(tmux list-clients -F '#{client_pid} #{session_name}' | grep "$PID")
            [ "$TMUXC" != '' ] && {
                # Get tmux session
                TMUXS=$(echo "$TMUXC" | awk '{print $2}')
                # if only tmux session needed
                [ "$1" = '--tmux-session' ] && echo "$TMUXS" && exit
                # PID running on the tmux session
                PID=$(tmux list-sessions -F "#{?#{==:#{session_name},$TMUXS},aaa,nnn} #{pane_pid}" | grep aaa | awk '{print $2}')
            }
            PID=$(getgoodpid "$PID")
            # If we find the working directory, run the command in that directory
            if [ -e "/proc/$PID/cwd" ]; then
                CWD=$(readlink "/proc/$PID/cwd")
            fi
        fi

    fi

    echo "$CWD"
}

# Get the current tmux session based on the focused X window
tmuxsession() {
    xpwd --tmux-session
}

# Start a tmux session or attach to deattached session if any
tmuxquick() {
    if [ "$TS" ]; then
        LS=$(tmux ls -F '#{session_name}' | grep "$TS")
        if [ "$LS" ]; then
            exec tmux a -t "$TS"
        else
            exec tmux new-session -s "$TS" "$@"
        fi
    else
        S=$(tmux ls -F '#{session_name} #{?session_attached,aaa,nnn}' 2>/dev/null \
                | grep nnn | grep -v ignored | tail -n 1 | awk '{print $1}')
        # If no unattached sessions or args available, create new one
        [ ! "$S" ] || [ $# != 0 ] && exec tmux new-session "$@"
        # If any tmux session is not attached, attach to it
        exec tmux a -t "$S"
    fi
}

# Start THE terminal
starterm() {
    if [ "$1" = '--nocd' ]; then
        shift
    else
        cd "$(xpwd)" ||:
    fi
    if [ "$TERMINAL" = '' ]; then
        if   command -v st    >/dev/null; then TERMINAL=st
        elif command -v urxvt >/dev/null; then TERMINAL=urxvt
        elif command -v xterm >/dev/null; then TERMINAL=xterm
        else echo 'No supported terminal found' && exit 1
        fi
    fi
    if [ "$TS" ]; then
        exec "$TERMINAL" $TARGS -e "$BINPATH" --tmuxs "$TS" "$@"
    else
        exec "$TERMINAL" $TARGS -e "$BINPATH" --tmux "$@"
    fi
}

# Ignore the current tmux session in the x window
tmuxignore() {
    S="$1"
    [ "$S" = '' ] && S=$(tmuxsession)
    [ "$S" = '' ] && return
    echo "$S" | grep -q 'ignored' && exit # only if not already ignored
    tmux rename-session -t "$S" "ignored-$S"
    echo "ignored-$S"
}

# Unignore the current tmux session in the x window
tmuxunignore() {
    S="$1"
    [ "$S" = '' ] && S=$(tmuxsession)
    [ "$S" = '' ] && return
    N=$(echo "$S" | sed -En 's/ignored-(.+)/\1/p')
    echo "$S" | grep -q 'ignored' && \
        tmux rename-session -t "$S" "$N" && \
        echo "$N"
}

# Unignore all tmux sessions
tmuxunignoreall() {
    tmux ls -F '#{session_name}' | grep 'ignored-' | \
        while read -r line; do
            tmuxunignore "$line" >/dev/null
        done
}

help() {
    echo "usage: $BINAME [OPTION]... [COMMANDS]
  -e, --command=COMMANDS        Execute the given COMMANDS in arguments
  --nocd                        Run without changing directory
  --tmux=COMMANDS               Starts a tmux session running the COMMANDS
  --tmux-ignore=TMUXSESSION     Ignore the TMUXSESSION
  --tmux-unignore=TMUXSESSION   Unignore the TMUXSESSION
  --tmux-unignore-all           Unignore all tmux sessions
  --xpwd                        Print working directory based on the X window
  --tmux-session                Print tmux session based on the X window
  -h, --help                    Show this help"
    exit 1
}

main() {
    [ "$1" = '-s' ] && TS="$2"    && shift 2
    [ "$1" = '-a' ] && TARGS="$2" && shift 2
    case "$1" in
        --xpwd)                         xpwd                ;;
        --tmux-session)                 tmuxsession         ;;
        --tmux)              shift   && tmuxquick       "$@";;
        --tmuxs)  TS="$2" && shift 2 && tmuxquick       "$@";;
        --tmux-ignore)       shift   && tmuxignore      "$@";;
        --tmux-unignore)     shift   && tmuxunignore    "$@";;
        --tmux-unignore-all)            tmuxunignoreall     ;;
        --command|-e)        shift   && starterm        "$@";;
        --nocd)              shift   && starterm --nocd "$@";;
        --help|-h)                      help                ;;
        *)                              starterm        "$@";;
    esac
}

main "$@"
